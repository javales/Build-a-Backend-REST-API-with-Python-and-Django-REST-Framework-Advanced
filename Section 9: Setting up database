# 35. Add postgres to docker compose
- set up Postgres instead of default SQLite
- start by making changes to Dockercompose file to create a database service and pass in database settings

## open docker-compose.yml to create db service
- pass in configuration settings using environment variables
- in real world, use an encrypted environment variable that overrides the plain text password when you push the application
- here, we're just running the database locally, so not a security issue

## modify app service to set environment variables and dependency on db service
- database will start before app service
- database will be available via network using hostname [db]

[[CODE]]
version: "3"

services:
    app: 
        build: 
            context: .
        ports:
            - "8000:8000"
        volumes:
            - ./app:/app
        command: >
            sh -c "python manage.py runserver 0.0.0.0:8000"
        environment:
            - DB_HOST=db
            - DB_NAME=app
            - DB_USER=postgres
            - DB_PASS=supersupersecret
        depends_on:
            - db

    db:
        image: postgres:10-alpine
        environment:
            - POSTGRES_DB=app
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=supersupersecret


# 36. Add postgres support to Dockerfile
- install Python package that is used for Django to communicate with Docker
- add dependencies to Dockerfile during the build process
- update requirements.txt to add the package(s), then change Dockerfile to add the dependencies required to install these packages

## open requirements.txt
- package recommended by Django for communicating between Django and Postgres is called [psycopg2]

[[CODE]]
Django>=2.1.3,<2.2.0
djangorestframework>=3.9.0,<3.10.0
psycopg2>=2.7.5,<2.8.0

flake8>=3.6.0,<3.7.0

## add dependencies to Dockerfile
- add between COPY and RUN
- install PostgreSQL client using Alpine's package manager
- [--update] = update registry before adding package
- [--no-cache] = don't store registry index in Dockerfile to minimize extra files and packages included in our container

## install temporary packages needed while we run our requirements (then remove when requirements have run)
- to minimize footprint of container
- [--virtual] sets up an alias for our dependencies to allow us to remove those dependencies later
- indent a little more than standard Python indent
- dependencies were what he got working after trial and error

## below install requirements line add remove temporary requirements removal

[[CODE]]
FROM python:3.7-alpine
MAINTAINER javales

ENV PYTHONUNBUFFERED 1

COPY ./requirements.txt /requirements.txt
RUN apk add --update --no-cache postgresql-client
RUN apk add --update --no-cache --virtual .tmp-build-deps \
      gcc libc-dev linux-headers postgresql-dev
RUN pip install -r /requirements.txt
RUN apk del .tmp-build-deps

RUN mkdir /app
WORKDIR /app
COPY ./app /app

RUN adduser -D user
USER user

## run docker-compose build
- to make sure image builds successfully


# 37. Configure database in Django
- configure Django project to use our Postgres database

## open settings.py within our app
- find DATABASES
- delete all the default options
- first line is engine, Postgres SQL engine
- use environment variables to specify database host name, referring to Docker-compose.yml for [DB_HOST] variable
- allows us to easily change our configuration to run our app on different servers, just by changing them in the environment variables without changing the hostname, name, username, or password
- allows uploading Dockerfile to a service like Amazon ECS or Kubernetes, setting appropriate environment variables, and application should work

[[CODE]]
"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 2.1.15.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '9py*d9^qcsvm%pp74m^y@87q@uk@wvzp+hk=47pe4mg_^m8(m2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.environ.get('DB_HOST'),
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASS'),
        #default options below
        #'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

AUTH_USER_MODEL = 'core.User'
