# 16. Setup new GitHib project
## project name: recipe-app-api
## Initialize this repository with a README
## python .gitignore file
## MIT License
- means anyone can the source code for free
- not going to enable this

[[Resources]]
[Connecting to GitHub with SSH]
https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh


# 17. Add Dockerfile
## use [3.7-alpine] image

## set [python unbuffered] environment variable
- [ENV PYTHONUNBUFFERED 1]
- recommended when running Python in containers to not allow Python to buffer the outputs
- just prints them directly
- avoids complications running Docker application

## store dependencies in requirements.txt list
- [COPY ./requirements.txt /requirements.txt] copy file from our folder (containing Dockerfile) to image
- [RUN pip install -r /requirements.txt] installs the depencies found in requirements.txt into image

## make directory in image to store application source code
- [RUN mkdir /app]
- [WORKDIR /app]
- [COPY ./app /app]

## create a user that will run our application using Docker
- [RUN adduser -D user] D is to create a user used for running applications only
- [USER user] switches Docker to the user we have just created
- reason to do this is for security purposes
- if you don't do this, then the image will run our application using the root account
-- not recommended because if somebody compromises our application, they can have root access to the whole image and do malicious things
- a separate account just for our application limits the scope an attacker would have within our Docker container

## save

## first line of requirements.txt, install Django
- https://pypi.org/ then search "django" 
- LESSON's latest version is [Django 2.1.3]
-- so, syntax is [Django>=2.1.3,<2.2.0]

## then Django REST Framework
- Python Package Index search "djangorestframework" WITH NO SPACES
- LESSON's latest version is [djangorestframework 3.9.0]

## build the Docker image
- [docker build .]

[[Resources]]
[Dockerfile reference]ðŸ”—
https://docs.docker.com/engine/reference/builder/

[Docker Hub]
https://hub.docker.com/

[Python Package Index PyPi]
https://pypi.org/

[CODE: Dockerfile]
https://gist.github.com/LondonAppDev/27c64d2c2df3555470812d4d77611389

[CODE: requirements.txt]
https://gist.github.com/LondonAppDev/a7a35a2b39ea4a3fa2c2a5283f300fc9


# 18. Configure Docker Compose
- [docker-compose] allows us to run our Docker image easily from our project location
- allows us to easily manage the different services that make up our project (e.g. our app, a database,...)

## create a docker-compose file for our project
- yaml file that contains the configuration for all the services that make up our project

### first line is the version of docker-compose that we're going to be writing our file for
- LESSON's latest version is 3
- [version: "3"]

### define services that make up our application
- just need one service for our django application for now
services:
    app: 
        build: 
            context: .
        ports:
            - "8000:8000"
        volumes:
            - ./app:/app
        command: >
            sh -c "python manage.py runserver 0.0.0.0:8000" #run Django development server available on all the IP address that run on the Docker container, running on port 8000 mapped to port 8000 on local machine (host)

## build image using docker-compose configuration
[docker-compose build]
- creates docker image with name of folder containing it
        
[[Resources]]
[Overview of Docker Compose]
https://docs.docker.com/compose/

[CODE: docker-compose.yml]
https://gist.github.com/LondonAppDev/c45ff292b4edcc6ebd90f71722d9988c


# 19. Custom configuration for Linux users
Custom configuration for Linux users
Notice for Linux users regarding permissions
Please read this if you are following this course on a Linux OS. Otherwise, feel free to skip to the next video.

In the next video we will create a new Django project using Docker.

Some Linux users have mentioned that they see the following error in the following video:

Traceback (most recent call last):
  File "/usr/local/bin/django-admin.py", line 5, in <module>
    management.execute_from_command_line()
  File "/usr/local/lib/python3.7/site-packages/django/core/management/__init__.py", line 381, in execute_from_command_line
    utility.execute()
  File "/usr/local/lib/python3.7/site-packages/django/core/management/__init__.py", line 375, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/usr/local/lib/python3.7/site-packages/django/core/management/base.py", line 316, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/usr/local/lib/python3.7/site-packages/django/core/management/base.py", line 353, in execute
    output = self.handle(*args, **options)
  File "/usr/local/lib/python3.7/site-packages/django/core/management/commands/startproject.py", line 20, in handle
    super().handle('project', project_name, target, **options)
  File "/usr/local/lib/python3.7/site-packages/django/core/management/templates.py", line 155, in handle
    with open(new_path, 'w', encoding='utf-8') as new_file:
PermissionError: [Errno 13] Permission denied: '/app/manage.py'
If you see this error, this is because of a known issue with Docker on Linux: https://github.com/moby/moby/issues/2259

Unfortunately I have not found a perfect solution, however a good workaround is as follows:

1. Update your docker-compose.yaml file to include user: $UID:$GID in the app service like this: https://gist.github.com/LondonAppDev/93f84cc9b86c0f513a18c70571af208a#file-docker-compose-yml-L5

2. Change the ownership of your app/ directory to your user by running chown -R $(whoami):$(whoami) app/

3. Now run export UID=${UID} && export GID=${GID} in the terminal to set your UID and GID variables (if you don't do this then you'll see a warning saying these values were not set when running docker).

4. Run the command again: docker-compose run app sh -c "django-admin.py startproject app .".

You should see that is works and the project is created with the correct permissions.

The drawback / issue with this solution is that step 3 needs to be ran every time you load a new terminal window. There are a few workarounds to this.

One is adding the export lines to your .bash_profile file so they are ran automatically each time you start a new terminal.

If you have any issues with the above workaround, please message me in the Q&A and include a link to your full source code on GitHub.


# 20. Create Django project

[[Resources]]
