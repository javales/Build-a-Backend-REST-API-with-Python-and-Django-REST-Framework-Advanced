# 25. Create core app
- core app will hold all central code important to the sub-apps we create in the system
- anything shared between one or more apps -- e.g. the migrations, database,... -- all in a core module so it's all in one, central place

[[GIT]]
https://stackoverflow.com/questions/47630950/how-can-i-switch-to-another-branch-in-git
git remote show origin
created Section7DjangoCustomUserModel branch in github.com
git fetch
git checkout Section7DjangoCustomUserModel
git branch #confirms now in new branch

## clean out the throw-away code from previous lessons
- calc.py, tests.py

## create app from terminal using [django manage] command
- [docker-compose run app sh -c "python manage.py startapp core"]
- creates new "core" app (folder) in project alongside the "app" app (folder)

## clean out files not going to be using
- not going to be using [tests.py] -- will explain in future video (basically: moving it to folder called "tests" to make it clearer where the tests are)
- not going to use [views.py], because it won't be serving anything; will simply be holding our database

## create new folder called tests
- inside, create __init__.py where we store our tests
- can create outside folder in file called tests.py, but when we might have multiple tests, might want to split them up into multiple test files
- can ONLY have EITHER the [tests] folder or the [tests.py]
^BEST_PRACTICES^

[[RESOURCES]]
Django manage.py startapp doc
https://docs.djangoproject.com/en/2.1/ref/django-admin/#startapp
Django settings INSTALLED_APPS
https://docs.djangoproject.com/en/2.1/ref/settings/#installed-apps


# 26. Add tests for custom user model
- core app done
- now create our custom user model
- since we're using TDD, we're going to write our [tests] FIRST then implement our [model] afterwards

## look at settings.py in "app" folder
- confirm core app is added to INSTALLED_APPS; add it

## create test_models.py in "tests" folder
- testing that our helper function for our model can create a new user
- use the create_user function to create a user
- verify the user has been created as expected

[[CODE]]
from django.test import TestCase
from django.contrib.auth import get_user_model


class ModelTests(TestCase):

  def test_create_user_with_email_successful(self):
    """Test creating a new user with an email is successful"""
    email = 'test@londonappdev.com'
    password = 'testpass123'
    user = get_user_model().objects.create_user(
      email=email,
      password=password
    )
    
    self.assertEqual(user.email, email)
    self.assertTrue(user.check_password(password))
    
    

[[CODE EXPLAINED]]
- import TestCase class
- import get_user_model helper function that comes with Django; "can import the user model directly from the models, but this is not recommended with django because at some point in the project you may want to change what your user model is and if everything is using the get_user_model function then that's really easy to do because you just change it in the settings instead of having to change all the references to the user model"
- create test class
- create test case
- set up the test by passing in email address and a password then verify that the user has been created and the email address and password are correct
- assign email value to email that does NOT have to be valid
- assign password that does not have to be secure because just going to be created for a moment while the test runs followed by the model being deleted afterwards
- call create_user function on the user manager for our [user model] that we're going to create in a future step
- now that we have our user, we can run some assertions to make sure the user was created correctly
- confirm user.email equals user value that was passed in
- can't check the password the same way, because it's encrypted; can only check it using the [check password function] on our [user model]
- check_password function is a helper function that comes with the Django user model and it returns True if the password is correct and false if not
[save]

## run unit tests to test that the test FAILS
[docker-compose run app sh -c "python manage.py test"]
AirTight:udemy-recipe-app-api twostudy$ docker-compose run app sh -c "python manage.py test"
Creating test database for alias 'default'...
System check identified no issues (0 silenced).
E
======================================================================
ERROR: test_create_user_with_email_successful (core.tests.test_models.ModelTests)
Test creating a new user with an email is successful
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/app/core/tests/test_models.py", line 13, in test_create_user_with_email_successful
    password=password
TypeError: create_user() missing 1 required positional argument: 'username'

----------------------------------------------------------------------
Ran 1 test in 0.011s

FAILED (errors=1)
Destroying test database for alias 'default'...


[[RESOURCES]]
Substituting a custom User model
https://docs.djangoproject.com/en/2.1/topics/auth/customizing/#substituting-a-custom-user-model

get_user_model() docs
https://docs.djangoproject.com/en/2.1/topics/auth/customizing/#django.contrib.auth.get_user_model

check_password() docs
https://docs.djangoproject.com/en/2.1/topics/auth/customizing/#django.contrib.auth.models.AbstractBaseUser.check_password

CODE: test_models.py
https://gist.github.com/LondonAppDev/2b76e595bd5fba90883ebe4a0a86d436


# 27. Implement custom user model
- create custom user model to get tests to pass
- create user model in our [models.py] file in the "core" app
- then update [settings.py] file in custom auth(?) user model

# models.py

[[CODE]]
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, \
                                        PermissionsMixin
                                        

class UserManager(BaseUserManager):
  
  def create_user(self, email, password=None, **extra_fields):
    """Create and saves a new user"""
    user = self.model(email=email, **extra_fields)
    user.set_password(password)
    user.save(using=self._db)
    
    return user


[[CODE EXPLAINED]]
- under import models, import the [abstract base user], the [base user manager], and the [permissions mixin]
- above are all the things required to extend the Django user model while making use of some of the features that come with the django user model out of the box
- next create [user manager class] - provides helper functions for creating a user or super user
- extend the [BaseUserManager], pulling in all the features that come with the BaseUserManager, BUT we're going to override a couple of the functions to handle our email address instead of the username that it expects
- [**extra_fields] means take any other extra arguments passed in when you call create_user and pass them into extra fields so we can parse them into extra fields and then add any additional fields that we create with user model; not required, but makes function more flexible because every time we add new fields to our user, we don't have to add them to the create_user definition and instead just add them ad hoc as we add them to our model
- within the function definition where user is assigned, [**extra_fields] unwinds the extra fields into here
- parses email, first, then parses anything extra we add
- the way the "manager commands" work is you can access the model the manager is for by typing self.model
- can't set password in that same line, because password must be encrypted using [set_password] helper function that comes with the Django AbstractBaseUser
- next, to save the user, type [using=self._db] for supporting multiple databases which we are not going to use in the course, but it is a BEST_PRACTICE
- next return the user

## IN SUMMARY
- create a new user model
- set the password
- save the model
- return the user model it has just created

## Create our model
- now the we have our manager class, create our model

[[CODE CONT.]]

class User(AbstractBaseUser, PermissionsMixin):
  """Custom user model that supports using email instead of username"""
  email = models.EmailField(max_length=255, unique=True)
  name = models.CharField(max_length=255)
  is_active = models.BooleanField(default=True)
  is_staff = models.BooleanField(default= False)
  
  objects = UserManager()
  
  USERNAME_FIELD = 'email'

[[CODE EXPLAINED]]
- we are going to extend from the AbstractBaseUser and PermissionsMixin, giving us 
- those give all the features that come out of the box with the Django user model, but we can then build on top of them and customize it to support our email address
- next define fields of our database model
- first email
- [unique] means you can only create one user with each email
- [models] is the import that is added by default with the [create app] command so it should be already on top of the file
- next add a name
- then determine if the user in the system is active or not, allowing us to deactive users
- but default to not being staff, creation of which requires use of a special command in a future video
- next assign user manager to the objects attribute
- finally we add username field equals email, since it defaults to username and we are customizing that to email so we can use an email address instead
- [save]

## next the settings.py
- customize our user model
- go to the very bottom to add new settings

[[CODE]]
AUTH_USER_MODEL = 'core.User'

[[CODE EXPLAINED]]
- AUTH_USER_MODEL must be all caps, assigning a string where core is name of app, and user is name of model in our app that we want to assign as the custom user model
- [save]

## next make migrations
- go to Terminal
- [docker-compose run app sh -c "python manage.py makemigrations core"]
- sometimes it doesn't work to run makemigrations on its own, so specify app name afterwards
- runs our database migrations, which create a new migrations folder and files in "core" folder which are the instructions for Django to create the model in the real database as an advanced feature we are not getting into
- sets up database, and every time you make a change to the models, you need to run the [migrations] again

AirTight:udemy-recipe-app-api twostudy$ docker-compose run app sh -c "python manage.py makemigrations core"
Migrations for 'core':
  core/migrations/0001_initial.py
    - Create model User
   
## run tests again expecting a pass

AirTight:udemy-recipe-app-api twostudy$ docker-compose run app sh -c "python manage.py test"
Creating test database for alias 'default'...
System check identified no issues (0 silenced).
.
----------------------------------------------------------------------
Ran 1 test in 0.224s

OK
Destroying test database for alias 'default'...


[[Resources]]
AbstractBaseUser docs
https://docs.djangoproject.com/en/2.1/topics/auth/customizing/#django.contrib.auth.models.AbstractBaseUser

BaseUserManager docs
https://docs.djangoproject.com/en/2.1/topics/auth/customizing/#django.contrib.auth.models.BaseUserManager

PermissionsMixin docs
https://docs.djangoproject.com/en/2.1/topics/auth/customizing/#django.contrib.auth.models.PermissionsMixin

CODE: models.py
https://gist.github.com/LondonAppDev/f6d0bf57d6ed4fa21a381ddded67bd34

CODE: settings.py
https://gist.github.com/LondonAppDev/765a82921a1739efd276c11dce29a726


# 28. Normalize email addresses
- create_user function created
- now add a new feature to the function to normalize the email address that users sign up with
- not required, but recommended because the second part of the user domain name is case-insensitive, so we DON'T want that to be case-sensitive when the users log in to the system
- solution: make that part ALL lowercase every time a new user registers

## open test_models.py

[[CODE]]

  def test_new_user_email_normalized(self):
    """Test the email for a new user is normalized"""
    email = 'test@londonAPPDEV.com'
    user = get_user_model().objects.create_user(email, 'test123')
  
    self.assertEqual(user.email, email.lower())

[[CODE EXPLAINED]]

## implement in models.py

[[CODE]]
user = self.model(email=self.normalize_email(email), **extra_fields)

[[CODE EXPLAINED]]
- just have to wrap the email value with the normalized email function
- [normalize_email] is a helper function that comes with the BaseUserManager

[[Resources]]
Django docs for normalize_email
https://docs.djangoproject.com/en/2.1/topics/auth/customizing/#django.contrib.auth.models.BaseUserManager.normalize_email

CODE: test_models.py
https://gist.github.com/LondonAppDev/ede9892a780f3ee9ab20516cc4fb9967

CODE: models.py
https://gist.github.com/LondonAppDev/25e5d4674528fdd56415696364b46383


# 29. Add validation for email field
- add validation that an email field is actually being provided when the user function is called

## open test_models.py

## open models.py
- between user = self.model and comment string above it, add

[[CODE]]
    if not email:
      raise ValueError('Users must have an email address')
      
[[CODE EXPLAINED]]
- add new test

[[Resources]]
CODE: test_models.py
https://gist.github.com/LondonAppDev/af416b2d945d338c2413322cbd50166f

CODE: models.py
https://gist.github.com/LondonAppDev/82a12747de0c844d6658949db6517b5a


# 30. Add support for creating superusers
- create user function is finished
- now one more function to add to our user model manager
- create the super user function
- this is a function used by the Django CLI when we're creating new users using the command line
- want to make sure it is included in our custom user model so that we can take advantage of the Django management command for creating a super user
- add this function to our user model

## open test_models.py

[[CODE]]
def test_create_new_superuser(self):
  """Test creating a new superuser"""
  user = get_user_model().objects.create_superuser(
    'test@londonAPPdev.com',
    'test123'
   )
   
   self.assertTrue(user.is_superuser)
   self.assertTrue(user.is_staff)

[[CODE EXPLAINED]]
- test that a super user is created when we call create_super_user and that it is assigned the is_staff and is_superUser settings
- is_superuser is part of the PermissionsMixin

## open models.py
- implement this feature and make these test pass

[[CODE]]
        
    def create_superuser(self, email, password):
        """Creates and saves a new super user"""
        user = self.create_user(email, password)
        user.is_staff = True
        user.is_superuser = True
        user.save(using=self._db)

        return user

[[CODE EXPLAINED]]
- below the create_user
[save]

## now commit, but first add flake command
- run linting on our project
[docker-compose run app sh -c "python manage.py test && flake8"]
AirTight:udemy-recipe-app-api twostudy$ docker-compose run app sh -c "python manage.py test && flake8"
Creating test database for alias 'default'...
System check identified no issues (0 silenced).
....
----------------------------------------------------------------------
Ran 4 tests in 0.417s

OK
Destroying test database for alias 'default'...
./core/models.py:4:1: W293 blank line contains whitespace
./core/models.py:7:1: W293 blank line contains whitespace
./core/models.py:11:65: W291 trailing whitespace
./core/models.py:15:1: W293 blank line contains whitespace
./core/models.py:17:1: W293 blank line contains whitespace
./core/models.py:33:44: E251 unexpected spaces around keyword / parameter equals
./core/models.py:34:1: W293 blank line contains whitespace
./core/models.py:36:1: W293 blank line contains whitespace
./core/models.py:37:1: W391 blank line at end of file
./core/admin.py:1:1: F401 'django.contrib.admin' imported but unused
./core/views.py:1:1: F401 'django.shortcuts.render' imported but unused
./core/tests/test_models.py:7:3: E111 indentation is not a multiple of four
./core/tests/test_models.py:15:1: W293 blank line contains whitespace
./core/tests/test_models.py:19:3: E111 indentation is not a multiple of four
./core/tests/test_models.py:23:1: W293 blank line contains whitespace
./core/tests/test_models.py:26:3: E111 indentation is not a multiple of four
./core/tests/test_models.py:30:3: E301 expected 1 blank line, found 0
./core/tests/test_models.py:30:3: E111 indentation is not a multiple of four
./core/tests/test_models.py:38:1: W391 blank line at end of file
AirTight:udemy-recipe-app-api twostudy$ 

## add all files to git
[git add .]
[git commit -a]
[Added custom user model]
[:wq]
A

[[Resources]]
Django manage.py createsuperuser
https://docs.djangoproject.com/en/2.1/ref/django-admin/#createsuperuser

CODE: test_models.py
https://gist.github.com/LondonAppDev/671e332c5731a8736c60a04038ceb74c

CODE: models.py
https://gist.github.com/LondonAppDev/1a9c70be7d3bbe4eca25481ab54a9a8b


# Quiz 3: Django custom user model
